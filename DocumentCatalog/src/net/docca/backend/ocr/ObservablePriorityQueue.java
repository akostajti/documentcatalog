/*
 * Copyright by Akos Tajti (akos.tajti@gmail.com)
 *
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of Akos Tajti. ("Confidential Information"). You
 * shall not disclose such Confidential Information and shall use
 * it only in accordance with the terms of the license agreement
 * you entered into with Akos Tajti.
 */
package net.docca.backend.ocr;

import java.util.HashSet;
import java.util.PriorityQueue;
import java.util.Set;

import net.docca.backend.ocr.OcrQueueFactory.QueueListener;

/**
 * a <code>PriorityQueue</code> implementation to which the users can add listeners that are notified when an element
 * was added.
 * @author Akos Tajti <akos.tajti@gmail.com>
 *
 * @param <T>
 */
class ObservablePriorityQueue<T> extends PriorityQueue<T> {

	/**
	 * serialVersionUID generated by the compiler.
	 */
	private static final long serialVersionUID = -5904516420444761349L;

	/**
	 * the listeners to be notified when a new element was added to the queue.
	 */
	private final Set<QueueListener<T>> listeners = new HashSet<>();

	@Override
	public final boolean add(final T e) {
		boolean result = super.add(e);
		notifyListeners(e);
		return result;
	}

	/**
	 * adds a new listener to the queue.
	 * @param listener the listener to add
	 */
	public void addListener(final QueueListener<T> listener) {
		if (listener != null) {
			listeners.add(listener);
		}
	}

	/**
	 * removes a listener.
	 * @param listener the listener to remove
	 */
	public void removeListener(final QueueListener<T> listener) {
		if (listener != null) {
			listeners.remove(listener);
		}
	}

	/**
	 * notifies all the listeners that <code>subject</code> was added to the queue.
	 * @param subject the new item
	 */
	private void notifyListeners(final T subject) {
		for (QueueListener<T> listener: listeners) {
			listener.notify(subject);
		}
	}
}

