/*
 * Copyright by Akos Tajti (akos.tajti@gmail.com)
 *
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of Akos Tajti. ("Confidential Information"). You
 * shall not disclose such Confidential Information and shall use
 * it only in accordance with the terms of the license agreement
 * you entered into with Akos Tajti.
 */
package net.docca.backend.ocr;

import java.io.File;
import java.util.HashMap;
import java.util.Map;

import net.docca.backend.Config;


/**
 * abstract base class representing any kind of ocr application.
 *
 * @author Akos Tajti <akos.tajti@gmail.com>
 *
 */
public abstract class OcrApplication {
	/**
	 * the name of the attribute that contains the language of the processed document.
	 */
	public static final String LANGUAGE = "language";

	/**
	 * the name of the argument that contains the output directory.
	 */
	public static final String OUTPUT_DIRECTORY = "outputDirectory";

	/**
	 * the name of the argument that contains the path to the processed image.
	 */
	public static final String IMAGE_PATH = "imagePath";

	/**
	 * the general configuration of the document catalog application.
	 */
	private Config config;

	/**
	 * a map of named arguments that can be used by this application.
	 */
	private Map<String, String> arguments = new HashMap<String, String>();

	/**
	 * runs the application.
	 * @return the output file generated by the application
	 * @throws Exception any exception is rethrown
	 */
	public abstract File run() throws Exception;

	/**
	 * returns the configuration.
	 * @return the config
	 */
	public final Config getConfig() {
		return config;
	}

	/**
	 * injects the configuration.
	 * @param config the configuration object read from the general config file of the application.
	 */
	public final void setConfig(final Config config) {
		this.config = config;
	}

	/**
	 * returns the arguments.
	 * @return the aruments of this application.
	 */
	public final Map<String, String> getArguments() {
		return arguments;
	}

	/**
	 * setter for arguments.
	 * @param arguments the named arguments. key is the name, value is the argument value.
	 */
	public final void setArguments(final Map<String, String> arguments) {
		this.arguments = arguments;
	}
}

