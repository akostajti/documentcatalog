package net.docca.backend.convert;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.List;

import net.docca.backend.convert.hocr.HocrDocument;
import net.docca.backend.convert.hocr.HocrParser;
import net.docca.backend.convert.hocr.attributes.BoundingBox;
import net.docca.backend.convert.hocr.elements.Line;
import net.docca.backend.convert.hocr.elements.Page;
import net.docca.backend.convert.hocr.elements.Word;

import org.apache.log4j.Logger;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.CMYKColor;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfWriter;

public class Hocr2PdfConverter {
	private static final Logger logger = Logger.getLogger(Hocr2PdfConverter.class);

	/**
	 * the default dpi value used if it cannot be derived from the image itself.
	 */
	private static final float DEFAULT_DPI = 100.0f;

	/**
	 * the default resolution of the pdf file
	 */
	private static float DEFAULT_RESOLUTION = 72.0f;

	private static final Font DEFAULT_FONT = FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD, CMYKColor.BLACK);

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		try {
			if(args.length < 1 || args[0] == "--help" || args[0] == "-h") {
				System.out.print(
						"Usage: java com.acoveo.hocrtopdf.HocrToPdf INPUTURL.html OUTPUTURL.pdf\n" +
						"\n" +
						"Converts hOCR files into PDF\n" +
						"\n" +
						"Example: java com.acoveo.hocrtopdf.HocrToPdf file:///home/username/hocr.html ./output.pdf\n");
				if(args.length < 1)
					System.exit(-1);
				else
					System.exit(0);
			}
			File inputHOCRFile = null;
			FileOutputStream outputPDFStream = null;
			try {
				inputHOCRFile = new File(args[0]);
			} catch (Exception e) {
				System.out.println("The first parameter has to be a valid URL");
				System.exit(-1);
			}
			try {
				outputPDFStream = new FileOutputStream(args[2]);
			} catch (FileNotFoundException e) {
				System.out.println("The second parameter has to be a valid URL");
				System.exit(-1);
			}
			
			new Hocr2PdfConverter().convertToPdf(inputHOCRFile, outputPDFStream);
		} catch (DocumentException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Processes a hOcr file (generated by tesseract)
	 * 
	 * @param hocr
	 * @param out
	 * @throws IOException
	 * @throws BadElementException
	 * @throws DocumentException
	 */
	public void convertToPdf(File hocr,
			FileOutputStream out) throws IOException,
			BadElementException, DocumentException {
		// parse the hocr file
		HocrParser parser = new HocrParser(hocr);
		HocrDocument document = parser.parse();


		Document pdf = new Document();
		PdfWriter writer = PdfWriter.getInstance(pdf, out);
		pdf.open();

		PageConverter pageConverter = new PageConverter(pdf, writer);
		for (Page page: document.getPages()) {
			pageConverter.addPage(page);
		}

		pdf.close();
	}



	class PageConverter {
		private Document document;
		private PdfWriter writer;

		public PageConverter(Document document, PdfWriter writer) throws BadElementException, MalformedURLException, IOException {
			this.document = document;
			this.writer = writer;
		}

		public void addPage(Page page) throws MalformedURLException, IOException, DocumentException {
			if (this.document.isOpen()) {
				document.newPage();
			} else {
				document.open();
			}

			Image image = Image.getInstance(page.getImage()); // FIXME: handle windows file names with space
			float dotsPerPointX = image.getDpiX() > 0.0 ? image.getDpiX() : DEFAULT_DPI / DEFAULT_RESOLUTION;
			float dotsPerPointY = image.getDpiY() > 0.0 ? image.getDpiY() : DEFAULT_DPI / DEFAULT_RESOLUTION;

			setupPage(image, dotsPerPointX, dotsPerPointY);

			addLines(page, dotsPerPointX, dotsPerPointY);
		}

		/**
		 * @param image
		 * @param dotsPerPointX
		 * @param dotsPerPointY
		 * @throws DocumentException
		 */
		private void setupPage(Image image, float dotsPerPointX,
				float dotsPerPointY) throws DocumentException {
			document.setPageSize(new Rectangle(image.getWidth() / dotsPerPointX, image.getHeight() / dotsPerPointY));
			logger.debug("dotsperpoint x = " + dotsPerPointX);
			logger.debug("dotsperpoint y = " + dotsPerPointY);
			image.scaleToFit(image.getWidth() / dotsPerPointX, image.getHeight() / dotsPerPointY);
			image.setAbsolutePosition(0, 0);
			writer.getDirectContent().addImage(image);
		}

		/**
		 * @param page
		 * @param dotsPerPointX
		 * @param dotsPerPointY
		 */
		private void addLines(Page page, float dotsPerPointX,
				float dotsPerPointY) {
			PdfContentByte contentBackground = writer.getDirectContentUnder();
			List<Line> lines = page.getLines();
			for (Line line: lines) {
				contentBackground.beginText();
				contentBackground.setTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_INVISIBLE);

				List<Word> words = line.getWords();
				float lineHeight = line.getBoundingBox().getHeight() / dotsPerPointY;
				float fontSize = computeFontSize(line.getBoundingBox(), dotsPerPointY);
				contentBackground.setFontAndSize(DEFAULT_FONT.getBaseFont(), fontSize);

				for (Word word: words) {
					adjustCharSpacing(contentBackground, word, dotsPerPointX);

					float y = (page.getBoundingBox().getHeight() - lineHeight - line.getBoundingBox().getBottom()) / dotsPerPointY;
					float x = word.getBoundingBox().getLeft() / dotsPerPointX;

					contentBackground.showTextAligned(PdfContentByte.ALIGN_LEFT, word.getTextContent(), x, y, 0);
					logger.debug("moving word " + word + " to " + x + "," + y);
				}
				contentBackground.endText();
			}
		}

		private float computeFontSize(BoundingBox box, float dotsPerPointVertical) {
			float lineHeight = box.getHeight() / dotsPerPointVertical;
			float result = Math.round(lineHeight);
			if (result == 0.0f) {
				result = lineHeight;
			}

			return result;
		}

		private void adjustCharSpacing(PdfContentByte cb, Word word, float dotsPerPointsHorizontal) {
			float wordWidth = word.getBoundingBox().getWidth() / dotsPerPointsHorizontal;
			float charSpacing = 0;
			cb.setCharacterSpacing(charSpacing);

			float textWidthPt = cb.getEffectiveStringWidth(word.getTextContent(), false);


			if (textWidthPt > wordWidth) {
				while (textWidthPt > wordWidth) {
					charSpacing -= 0.05f;
					cb.setCharacterSpacing(charSpacing);
					float newTextWidthPt = cb.getEffectiveStringWidth(word.getTextContent(), false);
					// !!! deadlock
					if (newTextWidthPt == textWidthPt || charSpacing > -0.5f) {
						break;
					}
					else {
						textWidthPt = newTextWidthPt;
					}
				}
			} else {
				while (wordWidth > textWidthPt) {
					charSpacing += 0.1f;
					cb.setCharacterSpacing(charSpacing);
					float newTextWidthPt = cb.getEffectiveStringWidth(word.getTextContent(), false);
					// !!! deadlock
					if (newTextWidthPt == textWidthPt || charSpacing > 0.5f) {
						break;
					} else {
						textWidthPt = newTextWidthPt;
					}
				}
			}
		}
	}
}

